You are an expert knowledge extractor. Your task is to extract entities from a given text and provide a brief summary of each extracted entity based on the information found in the text.

**Task Overview:**

1. **Entity Extraction:**  
   - Identify all significant entities mentioned in the text (e.g., persons, locations, items, factions, megacorporations etc.).
   - Use advanced extraction techniques such as named entity recognition and contextual analysis to capture all relevant details.
   - Assign each entity a name, a type (e.g. Person, Location, Item, Faction, Megacorp etc.) and a concise summary.

2. **Duplication Avoidance and Updating:**  
   - Compare extracted entities against a provided list of known entities.
   - If an entity already exists in the list, **do not include it again** in the output unless the new text provides additional or clarified information.  
     - If significant new information is found, update the entity’s summary with the **exact same name** in an 'updated_name' field.
     - If the new information reveals that the entity’s name should be updated (e.g., a mysterious person is identified by a name), include the new name in an 'updated_name' field.

3. **Ambiguity Handling:**  
   - When the text is ambiguous or if the significance of new details is unclear, use conservative extraction: include an entity only if the evidence is strong.
   - If multiple interpretations are possible, choose the most contextually supported entity.  

4. **Error Handling and Edge Cases:**  
   - If the text lacks clear context for an entity (e.g., type cannot be determined confidently), make a best-guess based on the surrounding context.
   - In cases where conflicting information about an entity is present, prioritize information that is most directly supported by the text.

5. **Contextual Consistency:**  
   - Ensure that the information extracted about each entity is consistent across the text.  
   - When merging new details with known entities, reconcile any differences carefully:
     - If inconsistencies are detected, merge the details while clearly reflecting any differences in a combined summary.
     - Avoid contradicting information by verifying which details are supported by the majority of the context.


**Input:**
- **text:** A narrative or dialogue that contains various entities.
- **entities:** A JSON array of known entities, provided to avoid duplication.  
  Each known entity includes:
  - `name`
  - `type`
  - `summary`

**Output Requirement:** 
Return the final extracted entities as a JSON object with the following structure:

```json
{{
    entities = [
        {{
            "name": "entity 1",
            "type": "entity type",
            "summary": "summary"
        }},
        {{
            "name": "entity 2",
            "type": "entity type",
            "summary": "summary"
        }}
    ],
    updated_entities = [
        {{
            "name": "entity 0 old",
            "updated_name": "entity 0 new",
            "type": "entity type",
            "summary": "new combined summary"
        }}
    ]
}}
```
Do not include any additional text or formatting outside the JSON.

**Example 1: Start with empty entities**

*Input:*
{{
    "text": "Bayonette receives a call from her fixer Jargo, who gives her the details of the job. It seems the wealthy individual who hired them is a powerful elf who is used to getting what he wants. He is offering a substantial payment for the return of his family heirloom, a large sword, which was stolen. And he wants it done discreetly. Bayonette listens intently, taking note of the details of the meeting location and time. The meeting is to take place in a high class restaurant where only the most elite of the cities can afford to dine: The Cloister. The Cloister is located on an artificial mountain several kilometres in distance from Seattle. Bayonette will have to be on her best behavior if she wants to get the job."
    "entities": []
}}


*Output:*
```json
{{
    entities = [
        {{
            "name": "Jargo",
            "type": "Person",
            "summary": "Bayonette's fixer."
        }},
        {{
            "name": "Client",
            "type": "Person",
            "summary": "A powerful elf who contracts the shadowrunners to return his stolen family heirloom."
        }},
        {{
            "name": "Family Heirloom",
            "type": "Item",
            "summary": "A large sword belonging to the contractor, a powerful elf, that has been stolen."
        }},
        {{
            "name": "The Cloister",
            "type": "Location",
            "summary": "A high class restaurant for the elite located on an artificial mountain several kilometers away from Seattle."
        }}
    ],
    "updated_entities": []
}}
```

**Example 3: Known entities**
*Input:*
{{
    "text": "The rickshaw driver grunts in acknowledgment and pulls away from the curb, the engine humming to life. The cab lurches forward, weaving through the crowded streets of Redmond. The rain beats against the windshield, the neon lights of the city blurring into a kaleidoscope of color.
As you approach the Aztech District, the skyscrapers of the megacorporations loom over you, their towers piercing the smoggy sky. The rickshaw pulls up to the curb outside the Neon Lotus, a sleek, neon-lit building nestled between towering corporate structures.
You slide your credstick into the rickshaw's payment slot, the transaction processing with a soft beep. The driver nods, a gruff 'Thanks, chummer' escaping his lips as you step out into the rain. The door slides shut behind you, and the rickshaw pulls away, leaving you alone on the bustling street.
The Neon Lotus is a beacon of corporate glamour amidst the gritty urban landscape. The entrance is flanked by two towering aztech guards, their cybernetic enhancements glinting under the neon lights. The doors slide open silently as you approach, revealing a lounge area bathed in soft, pulsing light. The air is thick with the scent of expensive liquor and the hum of low, sophisticated conversation."
    "entities": [
        {{"name": "Neon Lotus", "type": "location", "summary": "A sleek, neon-lit building nestled between towering corporate structures."}}, 
        {{"name": "Aztech District", "type": "location", "summary": "A district of the megacorporations in Redmond."}}
    ]
}}


*Output:*
```json
{{
    entities = [
        {{
            "name": "Rickshaw Driver",
            "type": "Person",
            "summary": "The Rickshaw driver was driving you to the Aztech District."
        }}
    ],
    "updated_entities": []
}}
```

**Example 3: Update Entities with same name**
*Input:*
{{
    "text": "GM: You meet your Decker, Lysandra, at the Neon Lotus.
PL: 'We're looking for Dr. Emily Hart of MTC'. I open commlink and slide the photo of Dr. Hart to their's. 'Last seen here...' I look to Lysandra 'You're the decker, right? I'd suggest you tap into the Neon Lotus serveillance system and scan for the woman... maybe the surveillance cams got something'
GM: You pull out your commlink and quickly transfer Dr. Emily Hart's photo to both Grimm and Lysandra. Grimm's cybernetic eye glows as he receives the image, and Lysandra's fingers dance over their deck, a small holo-display flickering to life in front of them.
Lysandra: 'I'm on it. Let's see what the Lotus has to offer.'
Lysandra leans back in their seat, eyes focused on the holo-display. Their fingers move rapidly, the deck humming softly as it connects to the bar's security system.
Lysandra: 'Alright, I'm in. Give me a moment to pull up the surveillance footage from the night she was last seen.'
You watch as Lysandra's fingers weave through the data streams, their expression intense and focused.
Lysandra: 'Found her. She was here, alright. And... she wasn't alone. There's another person with her, looks like they're having a heated conversation. Wait... the other person is... SINless.'"
    "entities": [
        {{"name": "Neon Lotus", "type": "location", "summary": "A sleek, neon-lit building nestled between towering corporate structures."}}, 
        {{"name": "Aztech District", "type": "location", "summary": "A district of the megacorporations in Redmond."}},
        {{"name": "Rickshaw Driver", "type": "Person", "summary": "The Rickshaw driver was driving you to the Aztech District."}}
    ]
}}


*Output:*
```json
{{
    entities = [
        {{
            "name": "Dr. Emily Hart",
            "type": "Person",
            "summary": "A member of MTC, last seen at the Neon Lotus where she was meeting someone described as 'SINless'."
        }},
        {{
            "name": "A SINless person",
            "type": "Person",
            "summary": "A person seen in a heated conversation with Dr. Emily Hart at the Neon Lotus."
        }},
        {{
            "name": "Lysandra",
            "type": "Person",
            "summary": "The decker who met with the player at the Neon Lotus and used surveillance to track Dr. Emily Hart."
        }}
    ],
    "updated_entities": [
        {{
            "name": "Neon Lotus",
            "updated_name": "Neon Lotus",
            "type": "Location",
            "summary": "A sleek, neon-lit building nestled between towering corporate structures where the Player met his Decker Lysandra. They discovered, that Dr. Emily Hart was meeting a SINless there."
        }},
    ]

}}
```

**Example 4: Update Entities with new name**
*Input:*
{{
    "text": "Billy walks to the beggar that he had already seen before he entered the building for his meeting. 'Hey... what's your name, and what are you doing here?'
The beggar looks up to Billy. 'Call me Jango, I'm just trying to get some food' he answers. While talking to the beggar Billies sees a small device hidden in the beggar's ear.
He recognizes that this is no beggar, but a lookout for the Hallweeners, a gang ruling this part of the Warrens"
    "entities": [
        {{"name": "Billy", "type": "person", "summary": "The player character"}}, 
        {{"name": "Beggar", "type": "location", "summary": "A beggar hanging out in front of a building in the Warrens."}},
    ]
}}


*Output:*
```json
{{
    entities = [
        {{
            "name": "Halloweeners",
            "type": "Faction",
            "summary": "A gang, ruling a part of the Warrens."
        }}
    ],
    "updated_entities": [
        {{
            "name": "Beggar",
            "updated_name": "Jango",
            "type": "Person",
            "summary": "A beggar hanging out in front of a building in the Warrens. He is a lookout for the Halloweeners"
        }}
    ]

}}
```



Begin processing the input text and output the extracted entities as described.


*Input:*
{{
    "text": {TEXT},
    "entities": {ENTITIES}
}}